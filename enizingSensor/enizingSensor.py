import base64, time, os, binascii, requests, sys
from Crypto.Cipher import AES
from base64 import b64encode,b64decode

class AESCipher:
    def __init__(self, key):
        self.key = base64.decodestring(key)
    def encrypt(self, raw_data,iv):
        BLOCK_SIZE = 16  # Bytes
        pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * \
                  chr(BLOCK_SIZE - len(s) % BLOCK_SIZE)
        raw_data = pad(raw_data)
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        encyrpted_data = b64encode(cipher.encrypt(raw_data))
        return encyrpted_data
    def decrypt(self, encyrpted_data,iv):
        unpad = lambda s: s[:-ord(s[len(s) - 1:])]
        encyrpted_data = b64decode(encyrpted_data)
        iv = encyrpted_data[:16]
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        raw_data = unpad(cipher.decrypt(encyrpted_data[16:])).decode('utf8')
        return raw_data

class enizingSensor(object):
    url = 'https://api.e-nizing.io/data'
    times = {}
    def __init__(self,HW_ID,HW_Key):
        """creates new enizingSensor Object
        
        Arguments:
            HW_ID {String} -- unique identifier for the sensor, generated by e-nizng.io
            HW_Key {String} -- encryption key
        """
        self.__HW_ID =HW_ID
        self.__HW_Key =HW_Key

    def _build_encrypted_payload(self,msg):
        """generates encrypted payload uses HW_ID and HW Key as well
        
        Arguments:
            msg {[type]} -- [description]
        """
        start_time = time.time()
        iv = os.urandom(16)
        iv_hex = binascii.b2a_hex(iv)
        IV = iv_hex.decode("hex").encode("base64")
        IV = IV.strip('\n')
        self._encrypted_payload = 'HWId='+self.__HW_ID+";"+IV+":"+AESCipher(self.__HW_Key).encrypt(msg,iv)
        end_time = time.time()
        self.times['encrypt_time'] = end_time - start_time
        return self._encrypted_payload
    
    def _send_encyrpted_payload(self,PayloadType,payload):
        headers = {'Content-Type': 'text/plain'}
        headers['X-Payload-Type'] = PayloadType
        start_time = time.time()
        try:
            response =  requests.post(self.url, data=payload, headers=headers)
        except:
            response =  "Unexpected error (no Internet):", sys.exc_info()[0]
        end_time = time.time()
        self.times['request_time'] = end_time - start_time
        return response

    def send_protobuf2(self,protobuf):
        encrypted_payload = self._build_encrypted_payload(protobuf)
        return self._send_encyrpted_payload('protobuf2',encrypted_payload)

    def send_csv(self,data_dict):

        first_line = 'timestamp'
        second_line = str(int(time.time()))
        for a in data_dict.viewkeys():
            first_line += ',' + str(a)
        for a in data_dict.viewvalues():
            if type(a) is str:
                second_line += ',"' + str(a) + '"'
            else:
                second_line += ',' + str(a)
            
        
        self.msg = first_line + '\n' + second_line
        encrypted_payload = self._build_encrypted_payload(self.msg)
        return self._send_encyrpted_payload('csv',encrypted_payload)
        


        